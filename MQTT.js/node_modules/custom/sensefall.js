
function SenseFall(isDebug) {

  this._SIGMA = 0.5;
  this._THESHOLD = 2; // 2g
  this._GRAVITY = 9.81; // 9.81 m/s^2

  this._isDebug = isDebug;
  this._window = [];

  console.log("SenseFall: new instance");
  this.setWindowSize = function(size) {
    this.windowSize = size;
  }

  this.addData = function(aX, aY, aZ) {
    var gravity = this.calculateGravity(aX, aY, aZ);
    this.pushToWindow(gravity);
    this.logging("addData: adding g=" + gravity);
  }

  this.calculateGravity = function(xVal, yVal, zVal) {
    var acceleration = Math.sqrt(Math.pow(xVal * -1, 2) + Math.pow(yVal * -1, 2) + Math.pow(zVal * -1, 2));
    var result = this.roundUp(acceleration / this._GRAVITY);
    if (isNaN(result)) {
      result = 0;
    }
    return result;	
  }

  this.roundUp = function(value) {
    return (value).toFixed(2);
  }

  this.pushToWindow = function(value) {
    if (this._window == undefined) {
      this._window = [];
    }

    if (this._window.length == this.windowSize) {
      this._window.shift();
    }
    this._window.push(value); 
    this.logging("pushToWindow: push " + value);
  }

  this.isTriggered = function() {
    if (this._window == undefined) {
      this._window = [];
      return false;
    }

    if(this._window.length < this.windowSize) {
      // window period is not fully added, cannot assume that a fall is triggered for incomplete period
      return false;
    }

    var maxValue = this.getLargestValue();
    var minValue = this.getSmallestValue();
    this.logging("isTriggered: maxVal=" + maxValue + ", minVal=" + minValue);

    return (maxValue - minValue >= this._THESHOLD);
  }

  this.reset = function() {
    this._window = [];
  }

  this.printWindow = function() {
    this.logging(this._window.toString());
  };

  this.logging = function(message) {
    if (this._isDebug) {
      console.log("SenseFall: " + message);
    }
  }

  this.getLargestValue = function() {
    if (this._window == undefined) {
      return 0;
    }

    if (this._window.length == 1) {
      return this._window[0];
    }

    return this._window.reduce(function(a, b) {
      return Math.max(a, b);
    });
  }

  this.getSmallestValue = function() {
    if (this._window == undefined) {
      return 0;
    }

    if (this._window.length == 1) {
      return this._window[0];
    }

    return this._window.reduce(function(a, b) {
      return Math.min(a, b);
    });
  }
}

module.exports = SenseFall;

